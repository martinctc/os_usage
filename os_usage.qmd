---
title: "vivainsights Download/Usage Report"
author: "Martin Chan"
date: "`r format(Sys.Date(), '%Y-%m-%d')`"
---

The notebook collects, aggregates, and visualizes the download numbers for the 'vivainsights' R and Python packages:

- [R](https://microsoft.github.io/vivainsights/)
- [Python](https://microsoft.github.io/vivainsights-py/)

The official repositories for open-source distribution of R and Python packages are the Comprehensive R Archive Network (CRAN) and Python Package Index (PyPI) respectively. 

There is no direct way to track package _usage_, but the figures can be estimated by combining documentation views and other data sources.

```{r setup, echo=FALSE,message=FALSE,warning=FALSE}
knitr::opts_chunk$set(
	echo = FALSE,
	message = FALSE,
	warning = FALSE
)

library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(shiny)
library(readr)
library(cranlogs)
library(gh) # GitHub API
library(httr)
library(jsonlite)
library(summaryBox) # remotes::install_github("deepanshu88/summaryBox")

pkg_name <- "vivainsights"
```


```{r echo=FALSE,message=FALSE,warning=FALSE}
start_date <- as.Date("2023-08-01")
end_date <- as.Date(Sys.Date(), format = "%Y-%m-%d")
cran_dl <-
  cranlogs::cran_downloads(packages = pkg_name,
                           from = start_date,
                           to = end_date)

cran_dl <-
  cran_dl %>%
  dplyr::select(date, CRAN = "count")
```

```{r}
api_endpoint <- paste0("https://pypistats.org/api/packages/", pkg_name, "/overall")

response <- httr::GET(api_endpoint)

if (status_code(response) == 200) {
  data <- jsonlite::fromJSON(content(response, "text"))
  pypi_dl <- data$data
  
} else {
  
  cat(paste0("Error: ", status_code(response), " - ", status_reason(response)))
  
}
```


```{r join-data, echo=FALSE,message=FALSE,warning=FALSE}
pypi_dl_agg <-
  pypi_dl %>%
  group_by(date) %>%
  summarise(PyPI = sum(downloads, na.rm = TRUE)) %>%
  mutate(date = as.Date(date, format = "%Y-%m-%d"))

full_dl_snapshot <-
  cran_dl %>%
  full_join(
    pypi_dl_agg,
    by = "date"
  )

full_dl_snapshot %>%
  write_rds(file = paste0(
    "data/",
    pkg_name,
    "_",
    min(full_dl_snapshot$date, na.rm = TRUE),
    "_",
    max(full_dl_snapshot$date, na.rm = TRUE),
    ".rds"
  ))

# Read RDS back in and bind
full_dl <-
  list.files(path = here::here("data")) %>%
  .[grepl(x = ., pattern = "[.]rds$", ignore.case = TRUE)] %>%
  purrr::map(function(x) {
    read_rds(paste0(here::here("data"), "/", x))
  }) %>%
  bind_rows() %>%
  unique()
```

This report captures `r round(n_distinct(full_dl$date))` days of data ranging from `r min(full_dl$date)` to `r max(full_dl$date)`.

# Summary

The boxes below show the headline summary statistics of the R and Python repositories. 

Numbers are aggregated for the last 30 days, excluding the current day and the day before due to incomplete data. 

```{r echo=FALSE,message=FALSE,warning=FALSE}
full_dl_l30 <-
  full_dl %>%
  arrange(date) %>%
  head(nrow(.) - 2) %>% # Remove last one day
  tail(30) %>% # last 30 days
  summarise(
    across(
      .cols = -date,
      .fns = ~sum(., na.rm = TRUE)
    )
  )

shiny::fluidRow(
  summaryBox(
    "CRAN Downloads (Last 30 days)",
    full_dl_l30[["CRAN"]],
    width = 3,
    icon = "fa fa-cloud-download",
    style = "info"
  ),
  
  summaryBox(
    "PyPI Downloads (Last 30 days)",
    full_dl_l30[["PyPI"]],
    width = 3,
    icon = "fa fa-cloud-download",
    style = "info"
  )
)

```


# Download statistics - CRAN, PyPI

The following plot shows the download statistics of the libraries from CRAN (R) and PyPI (Python). 

In general, download statistics from CRAN and PyPI should be more representative of actual user download and updates.

## Plots

### Daily downloads from CRAN and PyPI

```{r echo=FALSE,message=FALSE,warning=FALSE}
ts_plot <- 
  full_dl %>%
  select(date, CRAN, PyPI) %>%
  ggplot(aes(x = date)) +
  geom_smooth(aes(y = CRAN, color = "CRAN"), size = 1) +
  geom_smooth(aes(y = PyPI, color = "PyPI"), size = 1)+
  scale_color_manual(values = c("CRAN" = "#1f77b4", "PyPI" = "#ff7f0e")) +
  labs(title = "CRAN and PyPI Downloads",
       x = "Date",
       y = "Downloads",
       color = "Source") +
  theme_minimal() +
  theme(plot.title = element_text(size = 16, face = "bold"),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 12))

plotly::ggplotly(ts_plot)
```

## Notes

- The download figures may sometimes show irregularities, as new releases tend to trigger more downloads due to automated package archiving.
- Package updates also count towards downloads